{"version":3,"sources":["webpack:///./node_modules/babel-runtime/core-js/json/stringify.js","webpack:///src/components/JsonMe.vue","webpack:///./src/components/JsonMe.vue?365c","webpack:///./src/components/JsonMe.vue","webpack:///./node_modules/core-js/library/fn/json/stringify.js"],"names":["module","exports","default","__webpack_require__","__esModule","JsonMe","name","components","data","input","output","mounted","this","stringify_default","JSON","parse","jsonMe","methods","text","token","allElems","out","match","exec","test","push","length","pop","replace","allChars","result","content","substring","c","join","convertQuotes","components_JsonMe","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_m","attrs","data-lang","_s","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__","core","$JSON","stringify","it","apply","arguments"],"mappings":"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","file":"static/js/8.fa4b40d800bfd9ef9b4e.js","sourcesContent":["module.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/core-js/json/stringify.js\n// module id = mvHQ\n// module chunks = 8","<template>\n  <section class=\"section-json-me\">\n    <h1>json-me</h1>\n    <p>A function that strips comments from a json-ish file and converts it into a formatted json string.</p>\n    <p>As well as stripping both types of javascript comments\n      <code>//</code> and\n    <code>/* ... */</code>. It also will convert single quoted strings and non-quoted property names into json format double quoted properties. All white space is removed, JSON.parse</p>\n    <h2>Input</h2>\n    <pre\n      class=\"code\"\n      data-lang=\"javascript\"><code>{{ input }}</code></pre>\n    <h2>Output</h2>\n    <p>After parsing and stringifying\n    <code>JSON.stringify(JSON.parse(this.jsonMe(text)), null, ' ')</code>.</p>\n    <pre\n      class=\"code\"\n      data-lang=\"json\"><code>{{ output }}</code></pre>\n  </section>\n</template>\n\n<script>\n/* eslint-disable */\n\nexport default {\n  name: \"json-me\",\n  components: {},\n  data() {\n    return {\n      input: `// if json\n{ allowed: \"comments'\", /* all */\n\"over\": 'the place\\\\'\"',\n    'then': /* 'it\" */ \"may/* 'be'\", // more\nlike: 1,\n// this // true\ntrue: true, // booleans\n123: 456, // numbers\nthis: [\"fo\no\", 3, /* bar, //multiline strings\n */ { hey: there, be: true, \"foo\": \"\\\\t\\\\r\\u0444\\\\n\\x29\" },]\n}\n// this\n`,\n      output: \"\"\n    };\n  },\n  mounted() {\n    this.output = JSON.stringify(\n      JSON.parse(this.jsonMe(this.input)),\n      null,\n      \"  \"\n    );\n  },\n  methods: {\n    jsonMe(text) {\n      const allElems = /(\\/\\/.*|\\/\\*[\\d\\D]*?\\*\\/|\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|:|,|[\\w\\d]+|{|}|\\[|]|\\s)/g;\n      const out = [];\n\n      function convertQuotes(token) {\n        const allChars = /\\\\.|./g;\n        const result = [];\n        const content = token.substring(1, token.length - 1);\n\n        while (true) {\n          const c = allChars.exec(content);\n          if (!c) break;\n          if (c[0] === \"\\n\") result.push(\"\\\\n\");\n          else if (c[0] === \"\\r\") result.push(\"\\\\r\");\n          else if (c[0] === '\"') result.push('\\\\\"');\n          else if (c[0] === \"\\\\'\") result.push(\"'\");\n          else result.push(c[0]);\n        }\n        return `\"${result.join(\"\")}\"`;\n      }\n\n      function readToken(token) {\n        const isClosingPunctuation = /^[,\\]}]$/;\n        const isGeneralPunctuation = /^[{[]$/;\n        const isColon = /^:$/;\n        const isSpace = /^\\s$/;\n        const isBoolean = /^(?:true|false)$/;\n        const isNumeric = /^[-]?\\d+(\\.\\d+)?$/;\n        const startsWithSlash = /^\\//;\n        const startsWithQuote = /^\"/;\n        const startsWithApos = /^'/;\n\n        if (isSpace.test(token)) {\n          out.push(token);\n        } else if (startsWithSlash.test(token)) {\n          out.push(\"\");\n        } else if (isNumeric.test(token)) {\n          out.push(token);\n        } else if (isBoolean.test(token)) {\n          out.push(token);\n        } else if (isGeneralPunctuation.test(token)) {\n          out.push(token);\n        } else if (isClosingPunctuation.test(token)) {\n          if (out[out.length - 1] === \",\") out.pop();\n          out.push(token);\n        } else if (isColon.test(token)) {\n          if (out[out.length - 1][0] !== '\"')\n            out[out.length - 1] = `\"${out[out.length - 1]}\"`;\n          out.push(token);\n        } else if (startsWithQuote.test(token)) {\n          out.push(token.replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\"));\n        } else if (startsWithApos.test(token)) {\n          out.push(convertQuotes(token));\n        } else {\n          out.push(`\"${token}\"`);\n        }\n      }\n\n      while (true) {\n        const match = allElems.exec(text);\n        if (!match) break;\n        readToken(match[0]);\n      }\n\n      return out.join(\"\");\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/JsonMe.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:\"section-json-me\"},[_c('h1',[_vm._v(\"json-me\")]),_vm._v(\" \"),_c('p',[_vm._v(\"A function that strips comments from a json-ish file and converts it into a formatted json string.\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_c('h2',[_vm._v(\"Input\")]),_vm._v(\" \"),_c('pre',{staticClass:\"code\",attrs:{\"data-lang\":\"javascript\"}},[_c('code',[_vm._v(_vm._s(_vm.input))])]),_vm._v(\" \"),_c('h2',[_vm._v(\"Output\")]),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('pre',{staticClass:\"code\",attrs:{\"data-lang\":\"json\"}},[_c('code',[_vm._v(_vm._s(_vm.output))])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"As well as stripping both types of javascript comments\\n    \"),_c('code',[_vm._v(\"//\")]),_vm._v(\" and\\n  \"),_c('code',[_vm._v(\"/* ... */\")]),_vm._v(\". It also will convert single quoted strings and non-quoted property names into json format double quoted properties. All white space is removed, JSON.parse\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"After parsing and stringifying\\n  \"),_c('code',[_vm._v(\"JSON.stringify(JSON.parse(this.jsonMe(text)), null, ' ')\")]),_vm._v(\".\")])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4eecbebe\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/JsonMe.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4eecbebe\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"includePaths\\\":[\\\"./src/styles\\\",\\\"./node_modules/bootstrap/scss\\\",\\\"./node_modules/bootstrap/dist/css\\\"],\\\"data\\\":\\\"@import \\\\\\\"_main.scss\\\\\\\";\\\",\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./JsonMe.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./JsonMe.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./JsonMe.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4eecbebe\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./JsonMe.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4eecbebe\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/JsonMe.vue\n// module id = null\n// module chunks = ","var core = require('../../modules/_core');\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/core-js/library/fn/json/stringify.js\n// module id = qkKv\n// module chunks = 8"],"sourceRoot":""}